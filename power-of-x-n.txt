class Solution {
public:
    double myPow(double x, int n) {
      // if(n==0)
      //     return 1;
      // else if(n==1){
      //     return x;
      // }  
      // else if(n==-1){
      //     return 1/x;
      // }  
      // if(n>0){  
      // if(n%2==0)
      //     return myPow(x,n/2)*myPow(x,n/2);
      // else
      //     return x*myPow(x,n/2)*myPow(x,n/2);
      // }
      // else{
      //        if(n%2==0)
      //     return myPow(x,n/2)*myPow(x,n/2);
      // else
      //     return (1/x)*myPow(x,n/2)*myPow(x,n/2);
      // }  
        
    double res=1;
    long num=n;
    if(num<0)
    num*=-1;
    //using binary exponentiation
    while (num > 0) {
        if (num%2!=0)
            res = res * x;
        x = x * x;
        num =num/2;
    }
    
       if(n<0){
           return (double)1.0/res;
      }
       return res; 
    }
};
