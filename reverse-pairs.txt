class Solution {
public:
    int mergeSort(vector<int>& nums,int left,int right){
        int count =0;
         if(left>=right)
             return 0;
          
        int mid= (left + right)/2;
        //count all the revese pair in half array
        count+=mergeSort(nums,left,mid);
        //count all the reverse pair in sencond half array
        count+=mergeSort(nums,mid+1,right);
        //count all the reverse pair when we merge two halfs
        count+=merge(nums,left,mid,right);
       
        return count;
    }
    int merge(vector<int>& nums,int left,int mid,int right){
        
       int count=0;
       int j=mid + 1;
       for(int i=left;i<=mid;i++){ 
        
        while(j<=right && nums[i] >2LL*nums[j] ){
            
            j++;
        }
        count+=(j-(mid+1));
       }
        
        vector<int> number;
        int l=left,r=mid+1;
        //coping the value in another array
        while(l<=mid && r<=right){
            
            if(nums[l]<=nums[r]){
                number.push_back(nums[l++]);
            }else{
                number.push_back(nums[r++]);
            }
        }
        while(l<=mid){
            number.push_back(nums[l++]);
        }
        while(r<=right){
            number.push_back(nums[r++]);
        }
        for(int i=left;i<=right;i++){
             nums[i]=number[i-left];
        }
        return count;
        
    }
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
};
